<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\F072\Debug\Cry_Detector.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\F072\Debug\Cry_Detector.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Fri Nov 13 13:28:01 2015
<BR><P>
<H3>Maximum Stack Usage =        736 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Do_Loop &rArr; elliptic_filter &rArr; circbuf_access &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[32]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">APU_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">APU_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC_IRQHandler</a> from dirdetect.o(.text) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[e]">ADC_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[22]">APU_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[d]">APU_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[24]">EXINT_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[f]">EXINT_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[29]">GPAB_IRQHandler</a> from main.o(.text) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[14]">GPAB_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[1c]">HardFault_Handler</a> from SemiHost_Startup_Keil.o(.text) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[8]">HardFault_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[20]">NMI_Handler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[7]">NMI_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[2b]">PWM0_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[16]">PWM0_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[2f]">PWRWU_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[1a]">PWRWU_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[a]">PendSV_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[2e]">RTC_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[19]">RTC_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[30]">Reset_Handler</a> from startup_n572_isp.o(STARTUP) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[30]">Reset_Handler</a> from startup_n572_isp.o(STARTUP) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[2a]">SPI0_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[15]">SPI0_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[17]">SPI1_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[1d]">SVC_Handler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[9]">SVC_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[1f]">SysTick_Handler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[b]">SysTick_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[26]">TMR0_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[11]">TMR0_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[27]">TMR1_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[12]">TMR1_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[28]">TMR2_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[13]">TMR2_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[2d]">TMRF_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[18]">TMRF_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[10]">USB_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[21]">WDT_IRQHandler</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(IRQTABLE)
 <LI><a href="#[c]">WDT_Wrapper</a> from startup_n572_isp.o(EXCEPTION) referenced from startup_n572_isp.o(RESET)
 <LI><a href="#[31]">__main</a> from __main.o(!!!main) referenced from startup_n572_isp.o(JMPTABLE)
 <LI><a href="#[31]">__main</a> from __main.o(!!!main) referenced from startup_n572_isp.o(STARTUP)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7]"></a>NMI_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>APU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APU_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APU_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[24]"></a>EXINT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[20]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[2b]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[2f]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[2a]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[1d]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[26]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[27]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[28]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[2d]"></a>TMRF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[21]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[35]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[84]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[85]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[36]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[87]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))

<P><STRONG><a name="[88]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[89]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[90]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[91]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[92]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[93]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[96]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[97]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[98]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[99]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[9c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[9d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[34]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Do_Loop &rArr; elliptic_filter &rArr; circbuf_access &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elliptic_filter
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[29]"></a>GPAB_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPAB_IRQHandler &rArr; read_and_write_SPI &rArr; spiSlave_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_write_SPI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[43]"></a>adcClockInit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adcClockInit &rArr; DrvCLK_GetSrcClkAdc &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetSrcClkAdc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetHclk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clkInit
</UL>

<P><STRONG><a name="[47]"></a>clkInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clkInit &rArr; adcClockInit &rArr; DrvCLK_GetSrcClkAdc &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_UnlockKeyReg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcClockInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClkConfigRC
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>priorityInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = priorityInit &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>gpioInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_SetIOMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>uartInit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUART_Open
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = main &rArr; Do_Loop &rArr; elliptic_filter &rArr; circbuf_access &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlave_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirDetectInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Loop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priorityInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[53]"></a>circbuf_access</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = circbuf_access &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elliptic_filter
</UL>

<P><STRONG><a name="[65]"></a>circbuf_push</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = circbuf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elliptic_filter
</UL>

<P><STRONG><a name="[62]"></a>circbuf_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = circbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elliptic_filter
</UL>

<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_GetConversionDataSigned
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_ClearAdcIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[58]"></a>init_ADC</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = init_ADC &rArr; DrvTimer_WaitMillisecondTmr2 &rArr; DrvCLK_GetClkTmr2 &rArr; DrvCLK_GetTimerClk &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_WaitMillisecondTmr2
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_Open
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_AnalysisAdcCalibration
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_StopConvert
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_StartConvert
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_SetRegulatorRC
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirDetectInit
</UL>

<P><STRONG><a name="[5f]"></a>start_ADC</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_ADC &rArr; SkipAdcUnstableInput
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_StartConvert
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_ClearAdcIntFlag
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipAdcUnstableInput
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dirDetectInit
</UL>

<P><STRONG><a name="[a6]"></a>find_phase</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, dirdetect.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>find_phase32</STRONG> (Thumb, 96 bytes, Stack size 52 bytes, dirdetect.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>elliptic_filter</STRONG> (Thumb, 766 bytes, Stack size 624 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = elliptic_filter &rArr; circbuf_access &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_push
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_access
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Loop
</UL>

<P><STRONG><a name="[a8]"></a>abs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dirdetect.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>Do_Loop</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Do_Loop &rArr; elliptic_filter &rArr; circbuf_access &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elliptic_filter
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>dirDetectInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dirDetectInit &rArr; init_ADC &rArr; DrvTimer_WaitMillisecondTmr2 &rArr; DrvCLK_GetClkTmr2 &rArr; DrvCLK_GetTimerClk &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ADC
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>spiSlave_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spiSlave_Init &rArr; DrvSPI_Open &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_Open
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_SingleWriteData0
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_SetGo
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetHclk
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>spiSlave_Write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spiSlave_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_SingleWriteData0
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_SetGo
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_write_SPI
</UL>

<P><STRONG><a name="[42]"></a>read_and_write_SPI</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_and_write_SPI &rArr; spiSlave_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlave_Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvGPIO_GetInputPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPAB_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elliptic_filter
</UL>

<P><STRONG><a name="[a9]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_ldivmod</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elliptic_filter
</UL>

<P><STRONG><a name="[aa]"></a>_ll_sdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, llsdiv.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_assert</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circbuf_access
</UL>

<P><STRONG><a name="[ab]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_Open
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_WaitMillisecondTmr2
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUART_Open
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetHclk
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcClockInit
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_Loop
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[ae]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[b1]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[6d]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __assert_puts &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[6f]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[73]"></a>SemiHost_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, SemiHost_Startup_Keil.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_DoCommand
</UL>

<P><STRONG><a name="[74]"></a>SH_DoCommand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, SemiHost_Startup_Keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemiHost_Init
</UL>

<P><STRONG><a name="[1c]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, SemiHost_Startup_Keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(IRQTABLE)
</UL>
<P><STRONG><a name="[b2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[72]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[71]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[b5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[30]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_n572_isp.o(STARTUP))

<P><STRONG><a name="[32]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_n572_isp.o(STARTUP))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5e]"></a>DrvADC_AnalysisAdcCalibration</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, DRVADC_drvadc.o(i.DrvADC_AnalysisAdcCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvADC_AnalysisAdcCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_GetConversionDataSigned
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_ClearAdcIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[59]"></a>DrvADC_Open</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, DRVADC_drvadc.o(i.DrvADC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[44]"></a>DrvCLK_GetHclk</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, DRVCLK_drvclk_f072.o(i.DrvCLK_GetHclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetPLLOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_Open
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlave_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUART_Open
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetSrcClkAdc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcClockInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetTimerClk
</UL>

<P><STRONG><a name="[7d]"></a>DrvCLK_GetPLLOutput</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, DRVCLK_drvclk_f072.o(i.DrvCLK_GetPLLOutput))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetSrcClkAdc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetHclk
</UL>

<P><STRONG><a name="[45]"></a>DrvCLK_GetSrcClkAdc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, DRVCLK_drvclk_f072.o(i.DrvCLK_GetSrcClkAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvCLK_GetSrcClkAdc &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetHclk
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetPLLOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcClockInit
</UL>

<P><STRONG><a name="[7c]"></a>DrvCLK_GetTimerClk</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, DRVCLK_drvclk_f072.o(i.DrvCLK_GetTimerClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvCLK_GetTimerClk &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetHclk
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetClkTmr2
</UL>

<P><STRONG><a name="[67]"></a>DrvSPI_Open</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, DRVSPI_drvspi_f072.o(i.DrvSPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvSPI_Open &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetHclk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlave_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftUART_Open
</UL>

<P><STRONG><a name="[48]"></a>DrvSYS_UnlockKeyReg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, DRVSYS_drvsys.o(i.DrvSYS_UnlockKeyReg))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clkInit
</UL>

<P><STRONG><a name="[5b]"></a>DrvTimer_WaitMillisecondTmr2</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, DRVTIMER_drvtimer.o(i.DrvTimer_WaitMillisecondTmr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DrvTimer_WaitMillisecondTmr2 &rArr; DrvCLK_GetClkTmr2 &rArr; DrvCLK_GetTimerClk &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_OpenTmr2
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_CloseTmr2
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetClkTmr2
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[83]"></a>SendChar</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, semihost_retarget.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_DoCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[4f]"></a>SoftUART_Open</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, SOFTUART_softuart.o(i.SoftUART_Open), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSPI_Open
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetHclk
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[70]"></a>_ttywrch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, semihost_retarget.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ttywrch &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4b]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priorityInit
</UL>

<P><STRONG><a name="[4d]"></a>DrvGPIO_SetIOMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioInit
</UL>

<P><STRONG><a name="[49]"></a>SysClkConfigRC</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clkInit
</UL>

<P><STRONG><a name="[5a]"></a>DrvADC_SetRegulatorRC</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvADC_SetRegulatorRC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[57]"></a>SkipAdcUnstableInput</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dirdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SkipAdcUnstableInput
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_ClearAdcIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ADC
</UL>

<P><STRONG><a name="[56]"></a>DrvADC_ClearAdcIntFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dirdetect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ADC
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipAdcUnstableInput
</UL>

<P><STRONG><a name="[55]"></a>DrvADC_GetConversionDataSigned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dirdetect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>DrvADC_StartConvert</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dirdetect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ADC
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[5c]"></a>DrvADC_StopConvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dirdetect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ADC
</UL>

<P><STRONG><a name="[6b]"></a>DrvGPIO_GetInputPinValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_write_SPI
</UL>

<P><STRONG><a name="[69]"></a>DrvSPI_SetGo</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlave_Write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlave_Init
</UL>

<P><STRONG><a name="[68]"></a>DrvSPI_SingleWriteData0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlave_Write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSlave_Init
</UL>

<P><STRONG><a name="[c]"></a>WDT_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>APU_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXINT_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>USB_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR0_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TMR1_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TMR2_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPAB_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TMRF_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PWRWU_Wrapper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_n572_isp.o(EXCEPTION))
<BR>[Address Reference Count : 1]<UL><LI> startup_n572_isp.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DrvADC_ClearAdcIntFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, DRVADC_drvadc.o(i.DrvADC_ClearAdcIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_AnalysisAdcCalibration
</UL>

<P><STRONG><a name="[7a]"></a>DrvADC_GetConversionDataSigned</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, DRVADC_drvadc.o(i.DrvADC_GetConversionDataSigned))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvADC_AnalysisAdcCalibration
</UL>

<P><STRONG><a name="[80]"></a>DrvCLK_DisableApbDeviceClock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, DRVTIMER_drvtimer.o(i.DrvCLK_DisableApbDeviceClock))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_CloseTmr2
</UL>

<P><STRONG><a name="[82]"></a>DrvCLK_EnableApbDeviceClock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, DRVTIMER_drvtimer.o(i.DrvCLK_EnableApbDeviceClock))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_OpenTmr2
</UL>

<P><STRONG><a name="[7b]"></a>DrvCLK_GetClkTmr2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, DRVTIMER_drvtimer.o(i.DrvCLK_GetClkTmr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DrvCLK_GetClkTmr2 &rArr; DrvCLK_GetTimerClk &rArr; DrvCLK_GetHclk
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_GetTimerClk
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_WaitMillisecondTmr2
</UL>

<P><STRONG><a name="[7f]"></a>DrvSYS_ResetIP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, DRVTIMER_drvtimer.o(i.DrvSYS_ResetIP))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_OpenTmr2
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_CloseTmr2
</UL>

<P><STRONG><a name="[7e]"></a>DrvTimer_CloseTmr2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, DRVTIMER_drvtimer.o(i.DrvTimer_CloseTmr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DrvTimer_CloseTmr2
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_ResetIP
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_DisableApbDeviceClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_WaitMillisecondTmr2
</UL>

<P><STRONG><a name="[81]"></a>DrvTimer_OpenTmr2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, DRVTIMER_drvtimer.o(i.DrvTimer_OpenTmr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DrvTimer_OpenTmr2
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvSYS_ResetIP
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvCLK_EnableApbDeviceClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrvTimer_WaitMillisecondTmr2
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[76]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
